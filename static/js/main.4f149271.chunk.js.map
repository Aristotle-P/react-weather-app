{"version":3,"sources":["reducers/weatherReducer.js","reducers/locationReducer.js","reducers/index.js","actions/types.js","store.js","actions/weatherActions.js","components/Weather.js","components/Location.js","App.js","serviceWorker.js","index.js"],"names":["initialState","currentWeather","weatherConditions","wind","coord","location","city","errors","combineReducers","weather","state","arguments","length","undefined","action","type","Object","objectSpread","payload","main","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","getWeather","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","get","concat","process","sent","data","t0","stop","this","_x","Weather","props","_this$props","currWeather","conditions","react_default","createElement","className","Math","trunc","temp","speed","humidity","Component","connect","Location","onSubmit","e","preventDefault","_this","setState","onChange","defineProperty","target","name","value","placeholder","App","es","components_Location","components_Weather","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f149271.chunk.js","sourcesContent":["import { GET_WEATHER } from '../actions/types';\n\nconst initialState = {\n  currentWeather: {},\n  weatherConditions: [],\n  wind: {},\n  coord: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_WEATHER:\n      return {\n        ...state,\n        currentWeather: action.payload.main,\n        weatherConditions: action.payload.weather,\n        wind: action.payload.wind,\n        coord: action.payload.coord\n      };\n    default:\n      return state;\n  }\n}\n","import { GET_LOCATION, POST_ERROR } from '../actions/types';\n\nconst initialState = {\n  location: {\n    city: '',\n    errors: ''\n  }\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_LOCATION:\n      return {\n        ...state,\n        city: action.payload,\n        errors: ''\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        errors: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport weatherReducer from './weatherReducer';\nimport locationReducer from './locationReducer';\n\nexport default combineReducers({\n  weather: weatherReducer,\n  location: locationReducer\n});\n","export const GET_WEATHER = 'GET_WEATHER';\nexport const GET_LOCATION = 'GET_LOCATION';\nexport const POST_ERROR = 'POST_ERROR';\nexport const GET_MAP = 'GET_MAP';\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n// import { combineReducers } from 'redux';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\n// const rootReducer = combineReducers({});\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import { GET_WEATHER, GET_LOCATION, POST_ERROR } from './types';\nimport axios from 'axios';\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nexport const getWeather = city => async dispatch => {\n  try {\n    const res = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${API_KEY}`\n    );\n    dispatch({\n      type: GET_WEATHER,\n      payload: res.data\n    });\n    dispatch({\n      type: GET_LOCATION,\n      payload: city\n    });\n  } catch (e) {\n    dispatch({\n      type: POST_ERROR,\n      payload: `Sorry, I can't locate that city`\n    });\n  }\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getWeather } from '../actions/weatherActions';\n\nclass Weather extends Component {\n  componentDidMount() {\n    this.props.getWeather('New York');\n  }\n\n  render() {\n    const { currWeather, conditions, wind } = this.props;\n\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <h3 className=\"tempature\">{Math.trunc(currWeather.temp)}Â°</h3>\n        </div>\n        <div className=\"weather-wrapper\">\n          <div className=\"conditions weather-container\">\n            <p className=\"weather-heading\">Conditions</p>\n            <p>{(conditions[0] || {}).main}</p>\n          </div>\n          <div className=\"wind weather-container\">\n            <p className=\"weather-heading\">Wind</p>\n            <p>{wind.speed} MPH</p>\n          </div>\n          <div className=\"humidity weather-container\">\n            <p className=\"weather-heading\">Humidity</p>\n            <p>{currWeather.humidity}%</p>\n          </div>\n        </div>\n        <div />\n      </div>\n    );\n  }\n}\n\nWeather.propTypes = {\n  currWeather: PropTypes.object.isRequired,\n  conditions: PropTypes.array.isRequired,\n  wind: PropTypes.object.isRequired,\n  getWeather: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  currWeather: state.weather.currentWeather,\n  conditions: state.weather.weatherConditions,\n  wind: state.weather.wind\n});\n\nexport default connect(\n  mapStateToProps,\n  { getWeather }\n)(Weather);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getWeather } from '../actions/weatherActions';\n\nclass Location extends Component {\n  state = {\n    city: ''\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    const { city } = this.state;\n    const { getWeather } = this.props;\n\n    const newCity = {\n      city\n    };\n\n    getWeather(newCity.city);\n\n    this.setState({\n      city: ''\n    });\n  };\n\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { location, errors } = this.props;\n    const { city } = this.state;\n\n    return (\n      <div>\n        <form className=\"search-container\" onSubmit={this.onSubmit}>\n          <input\n            type=\"search\"\n            name=\"city\"\n            className=\"search\"\n            placeholder=\"Enter city here...\"\n            value={city}\n            onChange={this.onChange}\n          />\n\n          <button type=\"submit\" className=\"search-button\">\n            <span className=\"fas fa-search-location\" />\n          </button>\n        </form>\n        <div className=\"city-container\">\n          <p className=\"city\">{location}</p>\n          <p className=\"errors\">{errors}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nLocation.propTypes = {\n  location: PropTypes.string.isRequired,\n  errors: PropTypes.string,\n  getWeather: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  location: state.location.city,\n  errors: state.location.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { getWeather }\n)(Location);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport Weather from './components/Weather';\nimport Location from './components/Location';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Location />\n          <Weather />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}